{"version":3,"sources":["utils/latinise.ts","components/Select/Select.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx"],"names":["Latinise","latin_map","τ","Τ","latinise","input","replace","x","DropDownHeader","styled","div","theme","shadows","inset","colors","inputSecondary","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","width","props","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onChange","containerRef","useRef","dropdownRef","useState","setIsOpen","selectedOption","setSelectedOption","height","containerSize","setContainerSize","toggling","onOptionClicked","option","useEffect","current","offsetWidth","offsetHeight","ref","onClick","label","color","map","Wrapper","primary","ExpandableSectionButton","expanded","t","useTranslation","aria-label","role","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","flexDirection","split","variant","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","StyledInput","Input","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","value","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceNumber","Number","toLocaleString","undefined","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","handleSelectMax","title","disabled","isFinite","eq","gt","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","location","useLocation","stakedBalanceNumber","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","some","item","pathname","includes","HarvestAction","earnings","account","useWeb3React","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","ApyButton","apr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","background","isPromotedFarm","radii","Divider","borderColor","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltipVisible","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","marginBottom","marginTop","expandAnimation","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","isInactive","stakedOnly","setStakedOnly","setLoadArchivedFarmsData","fetchFarmsPublicDataAsync","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","marginLeft","sort","b","exact","renderContent","CardValue","lineHeight","prefix"],"mappings":"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","file":"static/js/5.a12c6e95.chunk.js","sourcesContent":["export const Latinise = {\r\n  latin_map: {\r\n    τ: 't',\r\n    Τ: 'T',\r\n  },\r\n}\r\n\r\nexport const latinise = (input: string) => {\r\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        <Text>{totalValueFormatted}</Text>\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceNumber = Number(balance)\r\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\r\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\r\n    }\r\n    return balanceNumber.toLocaleString()\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React, { useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const location = useLocation()\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\r\n        {displayBalance}\r\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\r\n      </Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      linkHref={addLiquidityUrl}\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`  \r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValueFormatted = farm.liquidity\r\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\r\n\r\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.token.symbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://ropsten.etherscan.io/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text, Image } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <div>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </div>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity ? (\r\n    `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n  ) : (\r\n    <Skeleton width={60} />\r\n  )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('The total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\n// TODO: Use `Text` instead\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = 0\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { t } = useTranslation()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>CAKE </Title>\r\n        <Subtle>{t('Earned').toUpperCase()}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n  const location = useLocation()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\r\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceNumber.toLocaleString()\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{t('Staked').toUpperCase()}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Stake').toUpperCase()} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{t('Enable Farm').toUpperCase()}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://ropsten.etherscan.io/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useMemo } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\r\n  const { t } = useTranslation()\r\n  const [toggled, setToggled] = useState(false)\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          value={searchText}\r\n          onChange={onChange}\r\n          placeholder={t('Search Farms')}\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices,GetPriceBySymbol } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\nlet cakeUsd;\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const prices = useGetApiPrices()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  \r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  useEffect(() => {\r\n    // Makes the main scheduled fetching to request archived farms data\r\n    dispatch(setLoadArchivedFarmsData(isArchived))\r\n\r\n    // Immediately request data for archived farms so users don't have to wait\r\n    // 60 seconds for public data and 10 seconds for user data\r\n    if (isArchived) {\r\n      \r\n      dispatch(fetchFarmsPublicDataAsync())\r\n      if (account) {\r\n        dispatch(fetchFarmUserDataAsync(account))\r\n      }\r\n    }\r\n  }, [isArchived, dispatch, account])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n \r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n // console.log(\"archivedFarms-a:\",archivedFarms);\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n       // console.log(\"farmsToDisplayWithAPR:\",farm);\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          // if (farm.lpSymbol === \"HUSD-PIPI LP\"){\r\n          return farm\r\n        //  }\r\n        }\r\n        \r\n         let quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toUpperCase()]\r\n         if(quoteTokenPriceUsd===undefined){\r\n          quoteTokenPriceUsd= cakePrice.toNumber() // * getBalanceNumber(farm.tokenPriceVsQuote)*10**18;  // getBalanceNumber(cakePrice.times(farm.tokenPriceVsQuote));\r\n         // console.log(\"quoteTokenPriceUsd:\",cakePrice.toNumber(),getBalanceNumber(farm.tokenPriceVsQuote)*10**18,quoteTokenPriceUsd,getBalanceNumber(farm.tokenAmount)*10**18);\r\n        }\r\n        // let quoteTokenPriceUsd = getBalanceNumber(GetPriceBySymbol(farm.quoteToken.symbol)) \r\n       // console.log(\"getFarmApr:\",getBalanceNumber(cakePrice,18),farm,farm.quoteToken.symbol.toUpperCase());\r\n        if (farm.quoteToken.symbol.toUpperCase()===\"HUSD\"||farm.quoteToken.symbol.toUpperCase()===\"USDT\"){\r\n           quoteTokenPriceUsd = 1;\r\n        }\r\n\r\n        // GetPriceByAddress(getAddress(farm.quoteToken.address).toLowerCase());\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n\r\n       // console.log(\"totalLiquidity:\",farm.lpTotalInQuoteToken,quoteTokenPriceUsd,totalLiquidity);\r\n\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n        // if (farm.lpSymbol === \"HUSD-PIPI LP\"){\r\n          \r\n        //  console.log(\"getFarmApr-details:\",getAddress(farm.quoteToken.address).toUpperCase(),apr,getBalanceNumber(totalLiquidity),quoteTokenPriceUsd);\r\n       // }\r\n       // console.log(\"getFarmApr:\",apr,cakePrice,totalLiquidity);\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n        \r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, prices, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\r\n        </Heading>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n"],"sourceRoot":""}