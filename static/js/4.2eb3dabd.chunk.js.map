{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","hooks/useTokenBalance.ts","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/WinCard.tsx","views/Home/Home.tsx","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","../node_modules/lodash/max.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","CardBusdValue","color","style","useTokenBalance","tokenAddress","BIG_ZERO","web3","useWeb3","contract","getBep20Contract","methods","balanceOf","call","fetchBalance","CakeWalletBalance","cakeBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","scale","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useTotalSupply","burnedBalance","console","log","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","error","fetchData","useGetStats","tvl","total_value_locked_all","toLocaleString","maximumFractionDigits","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","farmsLP","useFarms","prices","useGetApiPrices","cakePrice","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","getAddress","quoteToken","toLowerCase","totalLiquidity","times","getFarmApr","poolWeight","maxApr","max","exact","activeClassName","to","animation","variant","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","WinCard","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","prefix","bold","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","props","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"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","file":"static/js/4.2eb3dabd.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingMyb',\r\n        params: [farm.pid, account],\r\n      }))\r\n      // console.log(\"setFarmsWithBalances:\",calls);\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n      // console.log(\"setFarmsWithBalances:\",results);\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingMyb',\r\n        params: [farm.pid, account],\r\n      }))\r\n      // console.log(\"setBalance:\",calls);\r\n      const res = await multicall(masterChefABI, calls)\r\n      // console.log(\"setBalance:\",res);\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    const earningNumber = new BigNumber(earning)\r\n    if (earningNumber.eq(0)) {\r\n      return accum\r\n    }\r\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\r\n  }, 0)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      console.log(fetchBalance,contract);\r\n      console.log(tokenAddress);\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await web3.eth.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, web3, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const { t } = useTranslation()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('CAKE to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('CAKE in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? t('Collecting CAKE')\r\n                : t('Harvest all (%count%)', {\r\n                    count: balancesWithValue.length,\r\n                  })}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Cake Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={20} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const { t } = useTranslation()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading scale=\"lg\" mb=\"24px\">\r\n          {t('Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <Skeleton height={66} />\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/*\r\n * Due to Cors the api was forked and a proxy was created\r\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\r\n */\r\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\r\n\r\n/* eslint-disable camelcase */\r\n\r\nexport interface ApiTvlResponse {\r\n  update_at: string\r\n  '24h_total_volume': number\r\n  total_value_locked: number\r\n  total_value_locked_all: number\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<ApiTvlResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`${baseUrl}/tvl`)\r\n        const responseData: ApiTvlResponse = await response.json()\r\n\r\n        setData(responseData)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPRCard = () => {\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP } = useFarms()\r\n  const prices = useGetApiPrices()\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const highestApr = useMemo(() => {\r\n    const aprs = farmsLP\r\n      // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n      .map((farm) => {\r\n        if (farm.lpTotalInQuoteToken && prices) {\r\n          const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n          return getFarmApr(farm.poolWeight, cakePrice, totalLiquidity)\r\n        }\r\n        return null\r\n      })\r\n\r\n    const maxApr = max(aprs)\r\n    return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }, [cakePrice, farmsLP, prices])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            Earn up to\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">\r\n            {highestApr ? `${highestApr}% ${t('APR')}` : <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />}\r\n          </CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              in Farms\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPRCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#53dee9, #7645d9);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\n\r\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\r\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n// Always include CAKE\r\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\r\n\r\nconst EarnAssetCard = () => {\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            Earn\r\n          </Heading>\r\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              in Pools\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst WinCard = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {t('Lottery')}\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">{t('Coming Soon')}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\" />\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default WinCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\n// import LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {t('PancakeSwap')}\r\n        </Heading>\r\n        <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n         {/* <LotteryCard /> */ }\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPRCard />\r\n          <EarnAssetCard />\r\n          <WinCard />\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}